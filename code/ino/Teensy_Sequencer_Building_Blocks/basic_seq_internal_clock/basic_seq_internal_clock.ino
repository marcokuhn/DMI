/* DMI coursew, WS 2020-21 @ SRH
   marco.kuhn@srh.de

  -> INTERNAL CLOCK with METRO
   
    this is based on the code from Otem Rellik:
    https://github.com/otem/mr_touchy_teensy_polysynth_drummachine
 
*/

// Metro – makes it easy to schedule events to occur at regular intervals
// https://www.pjrc.com/teensy/td_libs_Metro.html
#include <Metro.h>

// ************************* START – GENERATED BY AUDIO DESIGN TOOL  
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioSynthSimpleDrum     drum1;          //xy=413.6666259765625,650.3333377838135
AudioSynthNoiseWhite     noise1;         //xy=416.9999809265137,725.3333606719971
AudioEffectEnvelope      envelope1;      //xy=592.0000877380371,722.0000472068787
AudioMixer4              mixer1;         //xy=863.6666030883789,667.0000267028809
AudioOutputI2S           i2s1;           //xy=1045.3332557678223,672.0000247955322
AudioConnection          patchCord1(drum1, 0, mixer1, 0);
AudioConnection          patchCord2(noise1, envelope1);
AudioConnection          patchCord3(envelope1, 0, mixer1, 1);
AudioConnection          patchCord4(mixer1, 0, i2s1, 0);
AudioConnection          patchCord5(mixer1, 0, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=697.3332595825195,876.6666650772095
// GUItool: end automatically generated code

// ************************* END – GENERATED BY AUDIO DESIGN TOOL  


Metro metro = Metro(300);
int kickSteps[16] =  {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0};
int noiseSteps[16] = {0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0};

bool seqPlay = true;
int seqStep = 0;
int prevSeqStep = 15;

elapsedMillis snare_env_ms;


void setup() {
  AudioMemory(20);
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.6);
  
  drum1.frequency(80);
  drum1.length(300);

  noise1.amplitude(1.0);

  envelope1.attack(30);
  envelope1.decay(10);
  envelope1.sustain(0.8);
  envelope1.release(10);  

  mixer1.gain(0,1.0);
  mixer1.gain(1,1.0);
    
  metro.interval(convertBPMtoMS(120));
}

void loop() {

  //DRUMS
  if (seqPlay) {
    if (metro.check() == 1) {
      seqStep++;
    }
    if (seqStep >= 16) {
      seqStep = 0;
    }

    //Play Pattern
    if (abs(seqStep - prevSeqStep) > 0) {
      if (kickSteps[seqStep]) {
        drum1.noteOn();
      }
      if (noiseSteps[seqStep]) {
        envelope1.noteOn();
        snare_env_ms = 0;
      }
    }
    prevSeqStep = seqStep;

    if(snare_env_ms > 20){
      envelope1.noteOff();
    } 
   
  }
}

// http://www.sengpielaudio.com/calculator-bpmtempotime.htm
float convertBPMtoMS(int bpm){
    float ms = (float) 60000 / bpm;
    return ms;
}
